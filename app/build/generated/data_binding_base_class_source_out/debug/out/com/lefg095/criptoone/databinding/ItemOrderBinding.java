// Generated by view binder compiler. Do not edit!
package com.lefg095.criptoone.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.lefg095.criptoone.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView materialCardView;

  @NonNull
  public final TextView tvAmount;

  @NonNull
  public final TextView tvAmountDesc;

  @NonNull
  public final TextView tvPrice;

  @NonNull
  public final TextView tvPriceDesc;

  private ItemOrderBinding(@NonNull ConstraintLayout rootView, @NonNull CardView materialCardView,
      @NonNull TextView tvAmount, @NonNull TextView tvAmountDesc, @NonNull TextView tvPrice,
      @NonNull TextView tvPriceDesc) {
    this.rootView = rootView;
    this.materialCardView = materialCardView;
    this.tvAmount = tvAmount;
    this.tvAmountDesc = tvAmountDesc;
    this.tvPrice = tvPrice;
    this.tvPriceDesc = tvPriceDesc;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.materialCardView;
      CardView materialCardView = rootView.findViewById(id);
      if (materialCardView == null) {
        break missingId;
      }

      id = R.id.tv_amount;
      TextView tvAmount = rootView.findViewById(id);
      if (tvAmount == null) {
        break missingId;
      }

      id = R.id.tv_amount_desc;
      TextView tvAmountDesc = rootView.findViewById(id);
      if (tvAmountDesc == null) {
        break missingId;
      }

      id = R.id.tv_price;
      TextView tvPrice = rootView.findViewById(id);
      if (tvPrice == null) {
        break missingId;
      }

      id = R.id.tv_price_desc;
      TextView tvPriceDesc = rootView.findViewById(id);
      if (tvPriceDesc == null) {
        break missingId;
      }

      return new ItemOrderBinding((ConstraintLayout) rootView, materialCardView, tvAmount,
          tvAmountDesc, tvPrice, tvPriceDesc);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
