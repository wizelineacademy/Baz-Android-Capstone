// Generated by Dagger (https://dagger.dev).
package com.lefg095.criptoone.di;

import com.lefg095.criptoone.data.interfaces.IOrderRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideOrderRepositoryFactory implements Factory<IOrderRepository> {
  private final Provider<ApiService> apiServiceProvider;

  public RepositoryModule_ProvideOrderRepositoryFactory(Provider<ApiService> apiServiceProvider) {
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public IOrderRepository get() {
    return provideOrderRepository(apiServiceProvider.get());
  }

  public static RepositoryModule_ProvideOrderRepositoryFactory create(
      Provider<ApiService> apiServiceProvider) {
    return new RepositoryModule_ProvideOrderRepositoryFactory(apiServiceProvider);
  }

  public static IOrderRepository provideOrderRepository(ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideOrderRepository(apiService));
  }
}
